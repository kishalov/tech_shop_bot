import os
import json
import asyncio
from openai import AsyncOpenAI
from dotenv import load_dotenv
import gspread
from collections import defaultdict

load_dotenv()
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

google_creds = "/configs/creds.json"
gc = gspread.service_account(filename=google_creds)
sheet = gc.open("Catalog").sheet1

LLM_MODEL = "gpt-4o-mini"
LLM_TIMEOUT = 60


POSTCHECK_PROMPT = """
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤.

–¢–µ–±–µ –¥–∞–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª—è–º–∏:
- "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
- "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" (–±—Ä–µ–Ω–¥)
- "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è"
- "–º–æ–¥–µ–ª—å"
- "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"
- "—Ü–µ–Ω–∞"

–¢–≤–æ—è –∑–∞–¥–∞—á–∞:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ–±—ã –≤—Å–µ –±—Ä–µ–Ω–¥—ã –±—ã–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω—ã –æ–¥–∏–Ω–∞–∫–æ–≤–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "samsung" ‚Üí "Samsung").
2. –ï—Å–ª–∏ —É —Ç–æ–≤–∞—Ä–∞ —É–∫–∞–∑–∞–Ω "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥", –Ω–æ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—Ä–µ–Ω–¥ ‚Äî –∏—Å–ø—Ä–∞–≤—å.
3. –ù–µ –º–µ–Ω—è–π –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ, –∫—Ä–æ–º–µ –±—Ä–µ–Ω–¥–æ–≤ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π.
4. –í–µ—Ä–Ω–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ JSON —Å–ø–∏—Å–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –ø–æ–ª—è–º–∏.

–ü—Ä–∏–º–µ—Ä:
[
  {"–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "Samsung Galaxy S24", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "Samsung", ...},
  {"–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "iPhone 14 Pro", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "Apple", ...}
]
"""


async def check_batch(batch: list[dict]):
	"""–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –≤ GPT –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –±—Ä–µ–Ω–¥–æ–≤"""
	text = json.dumps(batch, ensure_ascii=False)
	messages = [
		{"role": "system", "content": POSTCHECK_PROMPT},
		{"role": "user", "content": f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n{text}"}
	]

	try:
		resp = await asyncio.wait_for(
			client.chat.completions.create(
				model=LLM_MODEL,
				messages=messages,
				response_format={"type": "json_object"},
			),
			timeout=LLM_TIMEOUT
		)
	except Exception as e:
		print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
		return batch

	reply = getattr(resp.choices[0].message, "content", "")
	if not reply.strip():
		return batch

	try:
		data = json.loads(reply)
		if isinstance(data, list):
			return data
		return batch
	except Exception:
		print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å JSON, –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–∞—Ä—Ç–∏—é")
		return batch


async def postcheck_table():
	"""–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Å–µ–π —Ç–∞–±–ª–∏—Ü—ã"""
	print("üîç –ó–∞–≥—Ä—É–∂–∞—é —Ç–∞–±–ª–∏—Ü—É...")
	headers = sheet.row_values(1)
	all_rows = sheet.get_all_records()
	print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(all_rows)}")

	# –¥–µ–ª–∏–º –Ω–∞ –ø–∞—Ä—Ç–∏–∏ –ø–æ 50 —Ç–æ–≤–∞—Ä–æ–≤
	batch_size = 50
	for start in range(0, len(all_rows), batch_size):
		batch = all_rows[start:start + batch_size]
		print(f"üß© –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–æ–∫–∏ {start + 1}‚Äì{start + len(batch)}...")
		checked = await check_batch(batch)

		# –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–ª–∏—á–∏—è
		for i, item in enumerate(checked):
			row_index = start + i + 2  # +2 (–∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∏–Ω–¥–µ–∫—Å)
			row_values = [item.get(h, "") for h in headers]
			sheet.update(f"A{row_index}:{chr(65+len(headers)-1)}{row_index}", [row_values])
			await asyncio.sleep(0.5)

	print("‚úÖ –ü–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")


if __name__ == "__main__":
	asyncio.run(postcheck_table())
