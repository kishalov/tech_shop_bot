import os
import json
import asyncio
import re
import gspread
from openai import AsyncOpenAI
from dotenv import load_dotenv

load_dotenv()
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

google_creds = "/configs/creds.json"
gc = gspread.service_account(filename=google_creds)
sheet = gc.open("Catalog").sheet1

LLM_MODEL = "gpt-4o-mini"
LLM_TIMEOUT = 120
BATCH_SIZE = 20  # –º–µ–Ω—å—à–µ = —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ

POSTCHECK_PROMPT = """
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤.

–¢–µ–±–µ –¥–∞–Ω —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å –ø–æ–ª—è–º–∏:
"–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–º–æ–¥–µ–ª—å", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "—Ü–µ–Ω–∞".

1. –ò—Å–ø—Ä–∞–≤—å –±—Ä–µ–Ω–¥—ã (–ø–æ–ª–µ "–∫–∞—Ç–µ–≥–æ—Ä–∏—è"), —á—Ç–æ–±—ã –æ–Ω–∏ –±—ã–ª–∏ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º–∏.
2. –ï—Å–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–æ "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥", –ø–æ–ø—Ä–æ–±—É–π –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –±—Ä–µ–Ω–¥ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
3. –ù–µ –º–µ–Ω—è–π –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ "–∫–∞—Ç–µ–≥–æ—Ä–∏—è" –∏ "–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è".
4. –í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON-–°–ü–ò–°–û–ö (array) —Å —Ç–µ–º–∏ –∂–µ –æ–±—ä–µ–∫—Ç–∞–º–∏, –≥–¥–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –ø–æ–ª—è.
"""


async def check_batch(batch, attempt=1):
	text = json.dumps(batch, ensure_ascii=False)
	messages = [
		{"role": "system", "content": POSTCHECK_PROMPT},
		{"role": "user", "content": f"–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:\n{text}"}
	]
	try:
		resp = await asyncio.wait_for(
			client.chat.completions.create(
				model=LLM_MODEL,
				messages=messages,
				response_format={"type": "json_object"},
			),
			timeout=LLM_TIMEOUT
		)

		reply = getattr(resp.choices[0].message, "content", "").strip()

		# –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∞
		try:
			data = json.loads(reply)
		except Exception:
			m = re.search(r"\[.*\]", reply, re.S)
			if m:
				data = json.loads(m.group(0))
			else:
				raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ")

		# –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç ‚Äî —Å–ª–æ–≤–∞—Ä—å —Å –∫–ª—é—á–∞–º–∏, –≥–¥–µ –ª–µ–∂–∞—Ç –æ–±—ä–µ–∫—Ç—ã, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ø–∏—Å–æ–∫
		if isinstance(data, dict):
			data = [v for v in data.values() if isinstance(v, dict)]

		if not isinstance(data, list):
			raise ValueError(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–ø–∏—Å–æ–∫ (—Ç–∏–ø {type(data)})")

		return data

	except Exception as e:
		if attempt < 3:
			print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
			await asyncio.sleep(3)
			return await check_batch(batch, attempt + 1)
		else:
			print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–∫–µ—Ç –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {e}")
			return batch


async def postcheck_table():
	print("üß† –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫—É —Ç–∞–±–ª–∏—Ü—ã...")
	headers = sheet.row_values(1)
	all_rows = sheet.get_all_records()
	total = len(all_rows)
	print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {total}")

	changed = 0
	for start in range(0, total, BATCH_SIZE):
		batch = all_rows[start:start + BATCH_SIZE]
		print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–æ–∫–∏ {start + 1}‚Äì{min(start + BATCH_SIZE, total)}...")
		checked = await check_batch(batch)

		for i, item in enumerate(checked):
			row_idx = start + i + 2  # +2 = –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∏–Ω–¥–µ–∫—Å
			row_values = [item.get(h, "") for h in headers]
			try:
				sheet.update(f"A{row_idx}:{chr(65 + len(headers) - 1)}{row_idx}", [row_values])
				changed += 1
				await asyncio.sleep(0.6)
			except Exception as e:
				print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ {row_idx}: {e}")

	print(f"‚úÖ –ü–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±–Ω–æ–≤–ª–µ–Ω–æ {changed} —Å—Ç—Ä–æ–∫ –∏–∑ {total}.")


if __name__ == "__main__":
	asyncio.run(postcheck_table())
