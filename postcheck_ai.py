import os
import json
import asyncio
import re
import gspread
from openai import AsyncOpenAI
from dotenv import load_dotenv

load_dotenv()
client = AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))

google_creds = "/configs/creds.json"
gc = gspread.service_account(filename=google_creds)
sheet = gc.open("Catalog").sheet1

LLM_MODEL = "gpt-4o-mini"
LLM_TIMEOUT = 120
BATCH_SIZE = 20  # –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç–∏

# --- –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
VALID_CATEGORIES = [
	"iPhone SE / 11 / 12",
	"iPhone 13",
	"iPhone 14 / 14 Pro",
	"iPhone 15 / 15 Pro",
	"iPhone 16e / 16",
	"iPhone 16 Pro",
	"iPhone 17 / Air",
	"iPhone 17 Pro / Pro Max",
	"iPad Air",
	"iPad Pro",
	"iPad / iPad mini",
	"iMac",
	"MacBook Air",
	"MacBook Pro",
	"AirPods",
	"Apple Watch",
	"–Ø–Ω–¥–µ–∫—Å / JBL",
	"PS 5 / Xbox",
	"Huawei / Honor",
	"Pixel / One Plus",
	"Samsung",
	"Xiaomi / Poco",
	"Dyson",
	"DJi",
	"–°–º–∞—Ä—Ç-—á–∞—Å—ã",
	"–ù–∞—É—à–Ω–∏–∫–∏",
	"–ê–∫—Å–µ—Å—Å—É–∞—Ä—ã",
	"–ì–∞–¥–∂–µ—Ç—ã",
	"Fix / Labubu"
]

# --- —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç ---
POSTCHECK_PROMPT = f"""
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π —Ä–µ–¥–∞–∫—Ç–æ—Ä —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤.

–ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª—è:
"–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "—Ü–µ–Ω–∞".

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–µ "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", —á—Ç–æ–±—ã –æ–Ω–æ —Ç–æ—á–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–æ –æ–¥–Ω–æ–º—É –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.

1. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–Ω–∏–∫–∞–∫–∏—Ö –Ω–æ–≤—ã—Ö –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π):
{json.dumps(VALID_CATEGORIES, ensure_ascii=False, indent=2)}

2. –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø—É—Å—Ç–∞, –æ—à–∏–±–æ—á–Ω–∞ –∏–ª–∏ –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚Äî –ø–æ–¥–±–µ—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ç–æ–≤–∞—Ä–∞.
3. –ï—Å–ª–∏ –±—Ä–µ–Ω–¥ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é, –æ—Å—Ç–∞–≤—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø—É—Å—Ç–æ–π.
4. –ù–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ –ø–æ–ª—è "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", –Ω–µ –º–µ–Ω—è–π.
5. –°–æ—Ö—Ä–∞–Ω—è–π –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –≤–µ—Ä–Ω–∏ JSON-—Å–ø–∏—Å–æ–∫ —Ç–æ–≥–æ –∂–µ —Ä–∞–∑–º–µ—Ä–∞.
"""

# --- —É—Ç–∏–ª–∏—Ç—ã ---

def need_check(item: dict) -> bool:
	"""–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç—Ä–æ–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É"""
	cat = (item.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "").strip()
	name = (item.get("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞") or "").strip()
	if not name:
		return False
	return not cat or cat not in VALID_CATEGORIES


async def check_batch(batch, attempt=1):
	"""–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–¥–Ω–æ–≥–æ –±–∞—Ç—á–∞"""
	text = json.dumps(batch, ensure_ascii=False)
	messages = [
		{"role": "system", "content": POSTCHECK_PROMPT},
		{"role": "user", "content": f"–í–æ—Ç —á–∞—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ–¥—Ä—è–¥):\n{text}"}
	]
	try:
		resp = await asyncio.wait_for(
			client.chat.completions.create(
				model=LLM_MODEL,
				messages=messages,
				response_format={"type": "json_object"},
			),
			timeout=LLM_TIMEOUT
		)

		reply = getattr(resp.choices[0].message, "content", "").strip()
		try:
			data = json.loads(reply)
		except Exception:
			m = re.search(r"\[.*\]", reply, re.S)
			if not m:
				raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ JSON –≤ –æ—Ç–≤–µ—Ç–µ")
			data = json.loads(m.group(0))

		if isinstance(data, dict):
			data = [v for v in data.values() if isinstance(v, dict)]
		if not isinstance(data, list):
			raise ValueError(f"–û—Ç–≤–µ—Ç –Ω–µ —Å–ø–∏—Å–æ–∫ (—Ç–∏–ø {type(data)})")

		return data

	except Exception as e:
		if attempt < 3:
			print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}): {e}")
			await asyncio.sleep(3)
			return await check_batch(batch, attempt + 1)
		else:
			print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–∞–∫–µ—Ç –ø–æ—Å–ª–µ 3 –ø–æ–ø—ã—Ç–æ–∫: {e}")
			return batch


async def postcheck_table(limit_rows: int | None = None):
	"""–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
	print("üß† –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
	headers = sheet.row_values(1)
	all_rows = sheet.get_all_records()
	total = len(all_rows)
	if limit_rows:
		total = min(total, limit_rows)

	print(f"üìä –ü—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è {total} —Å—Ç—Ä–æ–∫.")
	changed = 0

	for start in range(0, total, BATCH_SIZE):
		batch = all_rows[start:start + BATCH_SIZE]
		to_check = [r for r in batch if need_check(r)]
		if not to_check:
			continue

		print(f"üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä–æ–∫–∏ {start + 1}‚Äì{min(start + BATCH_SIZE, total)}...")
		checked = await check_batch(to_check)

		for item in checked:
			old_item = next((r for r in batch if r["–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"] == item["–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"]), None)
			if not old_item:
				continue

			new_cat = (item.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "").strip()
			old_cat = (old_item.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "").strip()
			if new_cat == old_cat:
				continue

			try:
				row_idx = all_rows.index(old_item) + 2  # +2 = –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –∏–Ω–¥–µ–∫—Å
				col_idx = headers.index("–∫–∞—Ç–µ–≥–æ—Ä–∏—è") + 1
				sheet.update_cell(row_idx, col_idx, new_cat)
				changed += 1
				print(f"‚ôªÔ∏è –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è: {old_item['–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']} ‚Üí {new_cat}")
				await asyncio.sleep(0.5)
			except Exception as e:
				print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏: {e}")

	print(f"‚úÖ –ü–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ {changed} –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ {total} —Å—Ç—Ä–æ–∫.")


if __name__ == "__main__":
	asyncio.run(postcheck_table(limit_rows=200))
