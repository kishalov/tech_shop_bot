from aiogram import Router, types, F
from aiogram.filters import Command
from keyboards import main_kb
from handlers_catalog import show_catalog_menu, user_cart, ensure_catalog_warm
import re
from datetime import datetime

router = Router()

# üëâ —Å—é–¥–∞ –ø–æ–¥—Å—Ç–∞–≤—å id –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã
MANAGER_CHAT_ID = -4874196441

def _price_to_int(s: str) -> int:
    """'12 300 ‚ÇΩ' -> 12300; '9,200‚ÇΩ' -> 9200"""
    digits = re.sub(r"[^\d]", "", s or "")
    return int(digits) if digits else 0

def _build_cart_text(user: types.User, cart: list[dict]) -> str:
    lines = []
    total = 0
    for idx, p in enumerate(cart, start=1):
        parts = [p.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")]
        if p.get("—Ü–≤–µ—Ç"):
            parts.append(p["—Ü–≤–µ—Ç"])
        if p.get("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"):
            parts.append(p["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"])
        if p.get("—Ü–µ–Ω–∞"):
            parts.append(str(p["—Ü–µ–Ω–∞"]))
            total += _price_to_int(str(p["—Ü–µ–Ω–∞"]))
        lines.append(f"{idx}. " + " ‚Äî ".join(parts))

    user_link = f"<a href='tg://user?id={user.id}'>{user.full_name}</a>"
    uname = f"@{user.username}" if user.username else "‚Äî"

    header = (
        f"üßæ <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>\n"
        f"–î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
        f"–ö–ª–∏–µ–Ω—Ç: {user_link} ({uname}), id={user.id}\n\n"
    )
    footer = f"\n–ò—Ç–æ–≥–æ: <b>{total:,} ‚ÇΩ</b>".replace(",", " ")
    return header + "\n".join(lines) + footer


@router.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    loading_msg = await message.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥...")

    # –ø—Ä–æ–≥—Ä–µ–≤–∞–µ–º –∫—ç—à
    ensure_catalog_warm()

    # —É–¥–∞–ª—è–µ–º –∑–∞–≥–ª—É—à–∫—É
    try:
        await loading_msg.delete()
    except Exception:
        pass  # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å ‚Äî –Ω–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç!\n–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=main_kb
    )


@router.message(Command("refresh"))
async def manual_refresh(message: types.Message):
    ensure_catalog_warm(force=True)
    await message.answer("üîÑ –ö–∞—Ç–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω.") 


@router.message(F.text == "üìÇ –ú–µ–Ω—é")
async def open_catalog(message: types.Message):
    await show_catalog_menu(message)


@router.message(F.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def open_cart(message: types.Message):
    user_id = message.from_user.id
    cart = user_cart.get(user_id, [])

    if not cart:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø–æ–∫–∞ –ø—É—Å—Ç–∞.")
        return

    text = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
    total = 0
    for idx, p in enumerate(cart, start=1):
        parts = [p.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")]
        if p.get("—Ü–≤–µ—Ç"):
            parts.append(p["—Ü–≤–µ—Ç"])
        if p.get("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"):
            parts.append(p["—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"])
        if p.get("—Ü–µ–Ω–∞"):
            price = str(p["—Ü–µ–Ω–∞"])
            parts.append(price)
            # –≤—ã—á–ª–µ–Ω—è–µ–º —Ü–∏—Ñ—Ä—ã –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—É–º–º—ã
            digits = re.sub(r"[^\d]", "", price)
            if digits:
                total += int(digits)
        text += f"{idx}. " + " ‚Äî ".join(parts) + "\n"

    # –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –∏ –∏—Ç–æ–≥
    text += f"\n–ò—Ç–æ–≥–æ: <b>{total:,} ‚ÇΩ</b>".replace(",", " ")

    kb = types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data="checkout")]]
    )
    await message.answer(text, reply_markup=kb, parse_mode="HTML")


@router.callback_query(F.data == "checkout")
async def checkout(callback: types.CallbackQuery):
    await callback.answer()
    user_id = callback.from_user.id
    cart = user_cart.get(user_id, [])

    if not cart:
        await callback.message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –º–µ–Ω–µ–¥–∂–µ—Ä—É
    text = _build_cart_text(callback.from_user, cart)
    await callback.bot.send_message(MANAGER_CHAT_ID, text, parse_mode="HTML", disable_web_page_preview=True)

    # –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer("‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!")

    # –æ—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    user_cart[user_id] = []
