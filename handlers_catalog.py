from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from collections import defaultdict
from sheets import get_products
import re
import time

REFRESH_SECONDS = 600  # —Å–æ–±–∏—Ä–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç
CAT_CACHE: dict = {"built_at": 0, "by_category": {}}

router = Router()

# --- –∫–æ–Ω—Ñ–∏–≥ / –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ---
MAX_TG_LEN = 4000  # —á—É—Ç—å –Ω–∏–∂–µ 4096

# --- –ø–∞–º—è—Ç—å ---
user_cart: dict[int, list[dict]] = {}
subcat_context: dict[int, list[dict]] = {}  # message_id -> —Ç–æ–≤–∞—Ä—ã —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
# –∫—Ç–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ–π—á–∞—Å ¬´–¥–æ–±–∞–≤–ª—è–µ—Ç¬ª –∏ –∫ –∫–∞–∫–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
# user_id -> {"subcat": <message_id —Å–ø–∏—Å–∫–∞>, "prompt": <message_id –ø—Ä–æ–º–ø—Ç–∞>}
pending_add: dict[int, dict] = {}

# --- –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞ ---
INLINE_ORDER = ["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–±—Ä–µ–Ω–¥", "—Ü–≤–µ—Ç", "—Å–∏–ª–∞", "–æ–ø–∏—Å–∞–Ω–∏–µ", "—Ü–µ–Ω–∞"]


# --- –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ ---
def group_by_category(products: list[dict]) -> dict[str, list[dict]]:
	grouped = defaultdict(list)
	for p in products:
		grouped[p.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"].append(p)
	return grouped


def _group_by_subcategory(items: list[dict]) -> dict[str, list[dict]]:
	"""
	–ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º, –Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç ¬´–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª.
	–í—Å–µ —Ç–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –æ–±—â–∏–π –±–ª–æ–∫ "__NO_SUBCAT__".
	"""
	grouped = defaultdict(list)
	for p in items:
		sub = (p.get("–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è") or "").strip()
		if sub and sub.lower() not in {"", "–ë–µ–∑ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ë–µ–∑ —Ç–∏–ø–∞"}:
			grouped[sub].append(p)
		else:
			grouped["__NO_SUBCAT__"].append(p)
	return dict(sorted(grouped.items(), key=lambda kv: kv[0].lower() if kv[0] != "__NO_SUBCAT__" else ""))


def _format_item_one_line(p: dict) -> str:
	parts: list[str] = []
	for key in INLINE_ORDER:
		val = (p.get(key) or "").strip()
		if val:
			parts.append(val)
	# –¥–æ–±–∏—Ä–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –µ—Å—Ç—å
	skip = set(INLINE_ORDER + ["—Ñ–æ—Ç–æ", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "–±—Ä–µ–Ω–¥"])
	for k, v in p.items():
		v = (v or "").strip()
		if v and k not in skip:
			parts.append(v)
	return " | ".join(parts)


def _build_catalog_views(products: list[dict]) -> dict[str, list[dict]]:
	"""
	–°–æ–∑–¥–∞—ë—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É {–∫–∞—Ç–µ–≥–æ—Ä–∏—è: [—Å–ø–∏—Å–∫–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π]} –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–∞–ª–æ–≥–∞.
	–ï—Å–ª–∏ —É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî –≤—ã–≤–æ–¥–∏—Ç —Ç–æ–≤–∞—Ä—ã –æ–¥–Ω–∏–º –±–ª–æ–∫–æ–º.
	"""
	by_cat: dict[str, list[dict]] = {}
	cats = group_by_category(products)
	for cat, items in cats.items():
		groups = _group_by_subcategory(items)
		views = []
		for subcat, plist in groups.items():
			lines = [f"{i}) {_format_item_one_line(p)}" for i, p in enumerate(plist, start=1)]
			# –µ—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
			text = "\n".join(lines) if subcat == "__NO_SUBCAT__" else f"‚ñ∂ {subcat}\n\n" + "\n".join(lines)
			if len(text) > MAX_TG_LEN:
				text = text[:MAX_TG_LEN - 1] + "‚Ä¶"
			views.append({"subcat": subcat, "text": text, "plist": plist})
		by_cat[cat] = views
	return by_cat


def ensure_catalog_warm(force: bool = False):
	"""–ï—Å–ª–∏ –∫—ç—à –ø—É—Å—Ç–æ–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª ‚Äî –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç—ã."""
	now = time.time()
	if (not force) and CAT_CACHE["by_category"] and (now - CAT_CACHE["built_at"] < REFRESH_SECONDS):
		return
	products = get_products()  # —Ç—É—Ç —É–∂–µ –µ—Å—Ç—å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π TTL –∏–∑ sheets.py
	CAT_CACHE["by_category"] = _build_catalog_views(products)
	CAT_CACHE["built_at"] = now


# --- –º–µ–Ω—é –∫–∞—Ç–∞–ª–æ–≥–∞: —Å—Ä–∞–∑—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
async def show_catalog_menu(message: types.Message):
	ensure_catalog_warm()  # –ø—Ä–æ–≥—Ä–µ–µ–º –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–µ–Ω—é
	cats = list(CAT_CACHE["by_category"].keys())

	kb = InlineKeyboardBuilder()
	for cat in cats:
		kb.button(text=cat, callback_data=f"cat:{cat}")
	kb.adjust(2)
	await message.answer("üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup())


# --- –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é ---
@router.callback_query(lambda c: c.data.startswith("cat:"))
async def show_products(callback: types.CallbackQuery):
	await callback.answer()
	_, value = callback.data.split(":", 1)

	ensure_catalog_warm()  # –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

	views = CAT_CACHE["by_category"].get(value, [])

	# –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
	try:
		await callback.message.edit_text(f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {value}")
	except Exception:
		await callback.message.answer(f"üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {value}")

	kb_one = InlineKeyboardMarkup(
		inline_keyboard=[[InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å", callback_data="pick")]]
	)

	for v in views:
		sent = await callback.message.answer(v["text"], reply_markup=kb_one)
		subcat_context[sent.message_id] = v["plist"]  # –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è ¬´–ø–∏–∫–µ—Ä–∞¬ª


# --- –ø–∞—Ä—Å–∏–Ω–≥ "1, 3-5, 8" ---
def _parse_indices(s: str) -> list[int]:
	tokens = re.split(r"[,\s]+", (s or "").strip())
	out: list[int] = []
	for t in tokens:
		if not t:
			continue
		if "-" in t:
			a, b = t.split("-", 1)
			if a.isdigit() and b.isdigit():
				a, b = int(a), int(b)
				lo, hi = (a, b) if a <= b else (b, a)
				out.extend(range(lo, hi + 1))
		elif t.isdigit():
			out.append(int(t))
	return sorted(set(out))


# --- —Å—Ç–∞—Ä—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è (–Ω–∞–∂–∞—Ç–∞ "‚ûï –î–æ–±–∞–≤–∏—Ç—å") ---
@router.callback_query(F.data == "pick")
async def start_pick(callback: types.CallbackQuery):
	await callback.answer()
	subcat_msg_id = callback.message.message_id
	user_id = callback.from_user.id

	if subcat_msg_id not in subcat_context:
		await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ø–∏—Å–æ–∫ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.")
		return

	# –ü—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç –±–µ–∑ ForceReply ‚Äî –º–µ–Ω—é –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–µ—Ç
	prompt = await callback.message.answer(
		"–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1, 3-5, 8"
	)

	pending_add[user_id] = {"subcat": subcat_msg_id, "prompt": prompt.message_id}


# --- –ø—Ä–∏–Ω—è—Ç—å –Ω–æ–º–µ—Ä–∞ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ ForceReply ---
@router.message(F.text)
async def pick_numbers(message: types.Message):
	user_id = message.from_user.id
	data = pending_add.get(user_id)
	if not data:
		return  # —Å–µ–π—á–∞—Å –Ω–µ—Ç —Ä–µ–∂–∏–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è

	# –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–ø–ª–∞–π ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–∞ –Ω—É–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if message.reply_to_message:
		reply_id = message.reply_to_message.message_id
		if reply_id not in (data["prompt"], data["subcat"]):
			return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ —Ç—É–¥–∞

	plist = subcat_context.get(data["subcat"], [])
	if not plist:
		await message.answer("–°–ø–∏—Å–æ–∫ —ç—Ç–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å—Ç–∞—Ä–µ–ª. –û—Ç–∫—Ä–æ–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∑–∞–Ω–æ–≤–æ.")
		pending_add.pop(user_id, None)
		return

	idxs = _parse_indices(message.text)
	picked = []
	for i in idxs:
		j = i - 1
		if 0 <= j < len(plist):
			picked.append(plist[j])

	if not picked:
		await message.answer("–ù–µ —Ä–∞–∑–æ–±—Ä–∞–ª –Ω–æ–º–µ—Ä–∞. –ü—Ä–∏–º–µ—Ä: 1, 3-5, 8")
		return

	user_cart.setdefault(user_id, []).extend(picked)
	pending_add.pop(user_id, None)

	names = [p.get("–Ω–∞–∑–≤–∞–Ω–∏–µ", "–¢–æ–≤–∞—Ä") for p in picked][:5]
	more = "" if len(picked) <= 5 else f" –∏ –µ—â—ë {len(picked) - 5}"
	await message.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {', '.join(names)}{more}.\n–û—Ç–∫—Ä–æ–π—Ç–µ ¬´üõí –ö–æ—Ä–∑–∏–Ω–∞¬ª –≤ –º–µ–Ω—é.")
