import os
import re
import json
import asyncio
from openai import AsyncOpenAI
from dotenv import load_dotenv

load_dotenv()

api_key = os.getenv("OPENAI_API_KEY")
client = AsyncOpenAI(api_key=api_key)

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ò ------------------

LLM_MODEL = "gpt-4o-mini"   # —É—Å—Ç–æ–π—á–∏–≤–µ–µ –Ω–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–∞—Ö
LLM_TIMEOUT = 30             # —Å–µ–∫ –Ω–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
LLM_MAX_CONCURRENCY = 5      # –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ LLM
LLM_MAX_RETRIES = 3          # —Ä–µ—Ç—Ä–∞–∏ –Ω–∞ —Å—Ç—Ä–æ–∫—É

# –¶–µ–Ω–∞: —Å—Ç—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—ã "-20.000", "20.000", "-20,000", "20,000"
PRICE_RE = re.compile(
	r'(?P<price>-?\d{1,3}[.,]\d{3})(?!\d)',  # —á–∏—Å–ª–æ —Å 1‚Äì3 —Ü–∏—Ñ—Ä–∞–º–∏, –∑–∞—Ç–µ–º –∑–∞–ø—è—Ç–∞—è/—Ç–æ—á–∫–∞ –∏ –µ—â—ë 3 —Ü–∏—Ñ—Ä—ã
	re.IGNORECASE
)
EMOJI_RE = re.compile(r'[\U00010000-\U0010ffff]', flags=re.UNICODE)

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç: –û–î–ù–ê —Å—Ç—Ä–æ–∫–∞ ‚Üí –û–î–ò–ù –æ–±—ä–µ–∫—Ç
SINGLE_LINE_SYSTEM_PROMPT = """
–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Telegram-–ø–æ—Å—Ç–∞ –æ –ø—Ä–æ–¥–∞–∂–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∏.

–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ–∫–∞—Ç—å –¢–û–õ–¨–ö–û —Ä–µ–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã (—Ç–æ –µ—Å—Ç—å —É–ø–æ–º—è–Ω—É—Ç—ã–µ —Å —Ü–µ–Ω–æ–π)
–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∏—Ö **—Å—Ç—Ä–æ–≥–æ –ø–æ –∑–∞—Ä–∞–Ω–µ–µ –∑–∞–¥–∞–Ω–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º**.

‚ùó –í–æ—Ç –ü–û–õ–ù–´–ô –∏ –ï–î–ò–ù–°–¢–í–ï–ù–ù–´–ô —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ç–æ—á—å-–≤-—Ç–æ—á—å —Ç–∞–∫–∏–º–∏ –∂–µ):

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:
1. iPhone SE / 11 / 12
2. iPhone 13
3. iPhone 14 / 14 Pro
4. iPhone 15 / 15 Pro
5. iPhone 16e / 16
6. iPhone 16 Pro
7. iPhone 17 / Air
8. iPhone 17 Pro / Pro Max
9. iPad Air
10. iPad Pro
11. iPad / iPad mini
12. iMac
13. MacBook Air
14. MacBook Pro
15. AirPods
16. Apple Watch
17. –Ø–Ω–¥–µ–∫—Å / JBL
18. PS 5 / Xbox
19. Huawei / Honor
20. Pixel / One Plus
21. Samsung
22. Xiaomi / Poco
23. Dyson
24. DJi
25. –°–º–∞—Ä—Ç-—á–∞—Å—ã
26. –ù–∞—É—à–Ω–∏–∫–∏
27. –ê–∫—Å–µ—Å—Å—É–∞—Ä—ã
28. –ì–∞–¥–∂–µ—Ç—ã
29. Fix / Labubu

---

üéØ –í–∞–∂–Ω–æ:

1. **–ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞.**
   –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –Ω–µ –≤–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è ‚Äî –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –≤ —Ç–µ–∫—Å—Ç–µ –∑–≤—É—á–∏—Ç —á–∞—Å—Ç–∏—á–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞–ø–∏—Å–∞–Ω–æ ¬´JBL¬ª),
   –≤—Å—ë —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ü–û–õ–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞ ‚Äî ¬´–Ø–Ω–¥–µ–∫—Å / JBL¬ª.

2. **–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–æ–∫—Ä–∞—â–∞–π –∏ –Ω–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.**
   –î–∞–∂–µ –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ —É–ø–æ–º—è–Ω—É—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –±—Ä–µ–Ω–¥ –∏–∑ –ø–∞—Ä—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "Honor" –±–µ–∑ "Huawei"),
   –≤—Å—ë —Ä–∞–≤–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–ª–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é: ¬´Huawei / Honor¬ª –∏ —Ç.–ø.

3. **–ï—Å–ª–∏ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —É–∫–∞–∑–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –º–æ–¥–µ–ª—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, ‚ÄúA14‚Äù, ‚ÄúS22‚Äù, ‚ÄúX6‚Äù) ‚Äî**
   –∏ –≤ —Å—Ç—Ä–æ–∫–µ –Ω–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –±—Ä–µ–Ω–¥–∞ - –Ω–µ —É–∫–∞–∑—ã–≤–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞

4. –í—Å—ë, —á—Ç–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç –≤ —Å–∞–º–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (—Ü–≤–µ—Ç, –æ–±—ä—ë–º –ø–∞–º—è—Ç–∏, –≤–µ—Ä—Å–∏—è, –º–æ–¥–µ–ª—å, —Ä–µ–≥–∏–æ–Ω, –º–∞—Ç–µ—Ä–∏–∞–ª –∏ —Ç.–ø.),
   –ø–µ—Ä–µ–Ω–æ—Å–∏ –≤ –ø–æ–ª–µ `"—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏"`.

5. –í–æ–∑–≤—Ä–∞—â–∞–π –≤—Å–µ–≥–¥–∞ –û–î–ò–ù –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON-–æ–±—ä–µ–∫—Ç —Ç–∞–∫–æ–≥–æ –≤–∏–¥–∞:

{
  "–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": "",
  "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "",
  "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "",
  "—Ü–µ–Ω–∞": ""
}

7. –ù–µ –¥–æ–±–∞–≤–ª—è–π –ª–∏—à–Ω–∏—Ö –ø–æ–ª–µ–π –∏ –Ω–µ –ø–∏—à–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ ‚Äî —Ç–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç.
"""

# ------------------ –ü–û–ú–û–©–ù–ò–ö–ò ------------------

def _stitch_candidates(full_text: str) -> list[str]:
    """
    –°–æ–±–∏—Ä–∞–µ–º –ö–ê–ù–î–ò–î–ê–¢-–°–¢–†–û–ö–ò: —á–∏—Ç–∞–µ–º –í–°–Å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏,
    –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ü–µ–Ω–∞. –ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Ç–æ–≤–∞—Ä—ã, —É –∫–æ—Ç–æ—Ä—ã—Ö
    –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ —Ä–∞–∑–Ω–µ—Å–µ–Ω—ã –ø–æ —Å–æ—Å–µ–¥–Ω–∏–º —Å—Ç—Ä–æ–∫–∞–º, –ø—ã—Ç–∞–µ–º—Å—è —Å–∫–ª–µ–∏—Ç—å 1-2
    –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏, –µ—Å–ª–∏ –ø–µ—Ä–≤–∞—è –±–µ–∑ —Ü–µ–Ω—ã, –∞ —Å–ª–µ–¥—É—é—â–∞—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—É.
    """
    raw_lines = [EMOJI_RE.sub("", l).strip() for l in full_text.splitlines()]
    raw_lines = [l for l in raw_lines if l]  # —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ

    candidates = []
    i = 0
    n = len(raw_lines)
    while i < n:
        line = raw_lines[i]
        if PRICE_RE.search(line):
            candidates.append(line)
            i += 1
            continue

        # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–ª–µ–∏—Ç—å —Å 1‚Äì2 —Å–ª–µ–¥—É—é—â–∏–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏, –µ—Å–ª–∏ —Ç–∞–º –ø–æ—è–≤–∏—Ç—Å—è —Ü–µ–Ω–∞
        made = False
        for span in (1, 2):
            if i + span < n:
                combo = " ".join(raw_lines[i:i+span+1])
                if PRICE_RE.search(combo):
                    candidates.append(combo)
                    i += span + 1
                    made = True
                    break
        if not made:
            i += 1

    return candidates

# --- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã ---
def normalize_price(s: str) -> str:
	nums = re.findall(r"\d+", s.replace(",", "").replace(".", "").replace(" ", ""))
	if not nums:
		return ""
	raw = "".join(nums)
	try:
		price = int(raw)
		return f"{price:,} ‚ÇΩ".replace(",", " ")
	except ValueError:
		return ""

# --- —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ ---
def is_valid_item(item: dict) -> bool:
	name = item.get("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "").strip()
	if not name or len(name) < 3:
		return False
	if any(x in name.lower() for x in ["–¥–æ—Å—Ç–∞–≤–∫–∞", "—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞", "–∞–∫—Ü–∏—è", "–Ω–æ–≤–∏–Ω–∫–∏", "—Å–∫–∏–¥–∫–∞", "–≥–∞—Ä–∞–Ω—Ç–∏—è"]):
		return False
	if not item.get("—Ü–µ–Ω–∞"):
		return False
	return True

async def _parse_line_with_gpt(line: str, context_before: str = "", context_after: str = "") -> dict | None:
	"""
	–ü–∞—Ä—Å–∏–º –û–î–ù–£ —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ GPT —Å —É—á—ë—Ç–æ–º —Å–æ—Å–µ–¥–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.
	"""
	context_text = ""
	if context_before or context_after:
		context_text = (
			"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n"
			f"–î–æ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –±—ã–ª–æ:\n{context_before.strip()}\n\n"
			f"–ü–æ—Å–ª–µ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–¥—ë—Ç:\n{context_after.strip()}\n\n"
			"–ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —á–∞—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ–º–∫–æ—Å—Ç—å, —Ü–≤–µ—Ç–∞, —Ä–µ–≥–∏–æ–Ω—ã, –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è, "
			"–º–æ–¥–µ–ª–∏, –∫–æ–¥—ã –∏ —Ç.–ø.), –∏ –Ω–µ—Ç —è–≤–Ω–æ–π —Ü–µ–Ω—ã ‚Äî –ù–ï —Å—á–∏—Ç–∞–π —ç—Ç–æ —Ç–æ–≤–∞—Ä–æ–º.\n"
		)

	messages = [
		{"role": "system", "content": SINGLE_LINE_SYSTEM_PROMPT},
		{"role": "user", "content": context_text + f"–ê —Ç–µ–ø–µ—Ä—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç—Ä–æ–∫—É:\n{line.strip()}"}
	]

	try:
		resp = await asyncio.wait_for(
			client.chat.completions.create(
				model=LLM_MODEL,
				messages=messages,
				response_format={"type": "json_object"},
			),
			timeout=LLM_TIMEOUT
		)
	except asyncio.TimeoutError:
		return None
	except Exception as e:
		print(f"‚ö†Ô∏è LLM error: {e}")
		return None

	reply = getattr(resp.choices[0].message, "content", None)
	if not reply or not reply.strip():
		return None

	try:
		data = json.loads(reply)
		if isinstance(data, list):
			data = data[0] if data else None
		if not isinstance(data, dict):
			return None
		return data
	except Exception:
		m = re.search(r"\{.*\}", reply, re.S)
		if not m:
			return None
		try:
			return json.loads(m.group(0))
		except Exception:
			return None

async def _safe_parse_line(lines: list[str], index: int, sem: asyncio.Semaphore) -> dict | None:
	"""
	–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
	"""
	line = lines[index]
	context_before = "\n".join(lines[max(0, index - 2): index])
	context_after = "\n".join(lines[index + 1: index + 3])

	for attempt in range(LLM_MAX_RETRIES):
		async with sem:
			parsed = await _parse_line_with_gpt(line, context_before, context_after)
		if parsed:
			return parsed
		await asyncio.sleep(0.3 * (attempt + 1))

	# fallback
	m = PRICE_RE.search(line)
	if not m:
		return None
	raw_price = m.group("price")
	price_norm = normalize_price(raw_price)
	name = re.sub(r'\s*[-‚Äì‚Äî:]\s*$', "", line[:m.start()].strip())
	if len(name) < 2:
		return None
	return {
		"–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": name,
		"–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "",
		"–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "",
		"—Ü–≤–µ—Ç": "",
		"–º–æ–¥–µ–ª—å": "",
		"—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "",
		"—Ü–µ–Ω–∞": price_norm or raw_price,
	}

# ------------------ –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ------------------

def has_price_like(text: str) -> bool:
	"""
	–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ü–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
	-20.000 / 20.000 / -20,000 / 20,000
	"""
	return bool(PRICE_RE.search(text))

async def _safe_parse_line(lines: list[str], index: int, sem: asyncio.Semaphore) -> dict | None:
	"""
	–ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
	"""
	line = lines[index]
	context_before = "\n".join(lines[max(0, index - 2): index])
	context_after = "\n".join(lines[index + 1: index + 3])

	for attempt in range(LLM_MAX_RETRIES):
		async with sem:
			parsed = await _parse_line_with_gpt(line, context_before, context_after)
		if parsed:
			return parsed
		await asyncio.sleep(0.3 * (attempt + 1))

	# fallback ‚Äî —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞
	m = PRICE_RE.search(line)
	if not m:
		return None  # –±–µ–∑ —Ü–µ–Ω—ã –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞—ë–º
	raw_price = m.group("price")
	price_norm = normalize_price(raw_price)
	name = re.sub(r'\s*[-‚Äì‚Äî:]\s*$', "", line[:m.start()].strip())
	if len(name) < 2:
		return None
	return {
		"–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": name,
		"–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "",
		"–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": "",
		"—Ü–≤–µ—Ç": "",
		"–º–æ–¥–µ–ª—å": "",
		"—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": "",
		"—Ü–µ–Ω–∞": price_norm or raw_price,
	}


async def parse_full_message(text: str) -> list[dict]:
	"""
	1) –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ-—Ç–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Ü–µ–Ω—É.
	2) –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî —Å—Ä–∞–∑—É –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç (—á—Ç–æ–±—ã –Ω–µ –ø–∞—Ä—Å–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é).
	3) –í—ã–¥–µ–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏, –≥–¥–µ –µ—Å—Ç—å —Ü–µ–Ω—ã.
	4) –ü—Ä–æ–≥–æ–Ω—è–µ—Ç –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É —á–µ—Ä–µ–∑ GPT.
	5) –ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç —Ç–æ–≤–∞—Ä—ã.
	"""
	# üîπ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ —Ü–µ–Ω–æ–ø–æ–¥–æ–±–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
	if not has_price_like(text):
		print("‚è© –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é –ø–æ–ª–Ω–æ—Å—Ç—å—é.")
		return []

	candidates = _stitch_candidates(text)
	print(f"üîé –ö–∞–Ω–¥–∏–¥–∞—Ç–æ–≤-—Å—Ç—Ä–æ–∫: {len(candidates)}")

	if not candidates:
		print("‚è© –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ —Å —Ü–µ–Ω–∞–º–∏ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ.")
		return []

	sem = asyncio.Semaphore(LLM_MAX_CONCURRENCY)
	tasks = [asyncio.create_task(_safe_parse_line(candidates, i, sem)) for i in range(len(candidates))]
	parsed = await asyncio.gather(*tasks)

	results: list[dict] = []
	seen = set()  # –∑–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–µ–π (name+price)

	for item in parsed:
		if not item:
			continue

		# –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ü–µ–Ω—É
		if item.get("—Ü–µ–Ω–∞"):
			item["—Ü–µ–Ω–∞"] = normalize_price(str(item["—Ü–µ–Ω–∞"])) or str(item["—Ü–µ–Ω–∞"])

		name = (item.get("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞") or "").strip()
		price = (item.get("—Ü–µ–Ω–∞") or "").strip()
		if not name or not price:
			continue

		key = (name.lower(), price)
		if key in seen:
			continue
		seen.add(key)

		results.append({
			"–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞": name,
			"–∫–∞—Ç–µ–≥–æ—Ä–∏—è": item.get("–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "").strip(),
			"–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è": item.get("–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "").strip(),
			"—Ü–≤–µ—Ç": item.get("—Ü–≤–µ—Ç", "").strip(),
			"–º–æ–¥–µ–ª—å": item.get("–º–æ–¥–µ–ª—å", "").strip(),
			"—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏": item.get("—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "").strip(),
			"—Ü–µ–Ω–∞": price,
		})

	print(f"‚úÖ –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(results)}")
	return results

