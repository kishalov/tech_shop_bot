import os
import asyncio
from dotenv import load_dotenv
from telethon import TelegramClient
from parser_ai import parse_full_message
import gspread

load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env ---
api_id = int(os.getenv("TELEGRAM_API_ID"))
api_hash = os.getenv("TELEGRAM_API_HASH")
source_channel = os.getenv("SOURCE_CHANNEL")
google_creds = "/configs/creds.json"

# --- Google Sheets ---
gc = gspread.service_account(filename=google_creds)
sheet = gc.open("Catalog").sheet1

# --- –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Telegram ---
client = TelegramClient("parser_session", api_id, api_hash)


def _col_letter(n: int) -> str:
	s = ""
	while n > 0:
		n, r = divmod(n - 1, 26)
		s = chr(65 + r) + s
	return s


def _build_row_for_headers(item: dict, headers: list[str]):
	norm_headers = [h.strip().lower() for h in headers]
	fields = ["–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "–∫–∞—Ç–µ–≥–æ—Ä–∏—è", "—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", "—Ü–µ–Ω–∞"]
	idx = {f: (norm_headers.index(f) if f in norm_headers else None) for f in fields}

	if idx["–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"] is None:
		raise RuntimeError("–í —Ç–∞–±–ª–∏—Ü–µ –Ω–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'")

	existing = [i for i in idx.values() if i is not None]
	first, last = min(existing), max(existing)
	row_buf = [""] * (last - first + 1)

	def put(key: str, value: str):
		i = idx.get(key)
		if i is not None:
			row_buf[i - first] = (value or "").strip()

	for key in fields:
		put(key, item.get(key))

	return row_buf, first + 1, last + 1


async def process_message(message, headers, all_rows, name_col_norm):
	text = message.message
	if not text or len(text) < 20:
		return

	print(f"üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ {message.id}...")
	items = await parse_full_message(text)
	if not items:
		return

	unique_names = set()
	for item in items:
		name = item.get("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞", "").strip().lower()
		if not name or name in unique_names:
			continue
		unique_names.add(name)

		row_buf, c1, c2 = _build_row_for_headers(item, headers)

		# –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
		found_row = None
		for i, r in enumerate(all_rows[1:], start=2):
			val = r[name_col_norm].strip().lower() if len(r) > name_col_norm else ""
			if val == name:
				found_row = i
				break

		range_str = f"{_col_letter(c1)}{found_row or len(all_rows)+1}:{_col_letter(c2)}{found_row or len(all_rows)+1}"

		if found_row:
			sheet.update(range_str, [row_buf])
			print(f"‚ôªÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–æ: {item['–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}")
		else:
			sheet.append_row(row_buf, table_range=f"{_col_letter(c1)}1:{_col_letter(c2)}1")
			print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤–æ–µ: {item['–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']}")
			all_rows.append([""] * len(headers))

		await asyncio.sleep(0.5)  # –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞–µ–º API


async def main():
	await client.start()
	print(f"üîç –ß–∏—Ç–∞—é –ø–æ—Å—Ç—ã –∏–∑ –∫–∞–Ω–∞–ª–∞ @{source_channel}...")

	headers = sheet.row_values(1)
	all_rows = sheet.get_all_values()
	name_col_norm = [h.strip().lower() for h in headers].index("–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞")

	async for message in client.iter_messages(source_channel, limit=None, reverse=True):
		await process_message(message, headers, all_rows, name_col_norm)

	print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É.")

	# üß© –ü–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –±—Ä–µ–Ω–¥–æ–≤
	try:
		from postcheck_ai import postcheck_table
		print("\nüß† –ó–∞–ø—É—Å–∫–∞—é –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
		# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 300 —Å—Ç—Ä–æ–∫ ‚Äî –æ–±—ã—á–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –æ—Ö–≤–∞—Ç–∏—Ç—å —Å–≤–µ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã
		await postcheck_table(limit_rows=300)
		print("‚úÖ –ü–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
	except Exception as e:
		print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø–æ—Å—Ç–ø—Ä–æ–≤–µ—Ä–∫–∏: {e}")

async def daily_job():
	while True:
		print("üïì –ó–∞–ø—É—Å–∫–∞—é –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–æ–Ω...")
		try:
			await main()
		except Exception as e:
			print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–æ–≥–æ–Ω–∞: {e}")
		print("üí§ –û–∂–∏–¥–∞–Ω–∏–µ 24 —á–∞—Å–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–æ–≥–æ–Ω–∞...")
		await asyncio.sleep(24 * 60 * 60)  # 24 —á–∞—Å–∞


if __name__ == "__main__":
	asyncio.run(daily_job())
